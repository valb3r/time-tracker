import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

group 'ua.timetracker.reportgenerator'
version '0.1-SNAPSHOT'
description = 'Report generation/scheduled stuff for time spent by users on projects'

buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}"
        classpath "io.spring.gradle:dependency-management-plugin:${versions.springDependencyManagement}"
    }
    repositories {
        mavenCentral()
    }
}

apply from: "$rootProject.projectDir/shared.gradle"

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/libs-snapshot"
    }
}

dependencies {
    compile project(":shared")
    compile project(":neo4j-adapter")

    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-neo4j'
    compile "org.neo4j:neo4j-ogm-bolt-native-types:${versions.boltNativeTypes}"

    compile "org.jxls:jxls:${versions.jxls}"
    compile "org.jxls:jxls-poi:${versions.jxlsPoi}"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    compile "org.mapstruct:mapstruct:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"

    compile "com.google.guava:guava:${versions.guava}"
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "org.hibernate:hibernate-validator:${versions.validator}"

    testCompile "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

apply from: "$rootProject.projectDir/shared.gradle"
apply plugin: 'com.bmuschko.docker-remote-api'

bootJar {
    enabled = true
    mainClassName = 'ua.timetracker.reportgenerator.Worker'
}

jar {
    version = project.version
    enabled = true
}

task syncJar(type: Copy) {
    dependsOn bootJar
    from "${buildDir}/${libsDirName}"
    into dockerBuildDir
}

task createDockerfile(type: Dockerfile) {
    def cmd = "/app/worker-${commitSha()}.jar";
    from 'openjdk:8-jre-alpine'
    label(['maintainer': 'Valentyn Berezin vbe@adorsys.com.ua"'])
    copyFile(jar.archiveFileName.get(), cmd)
    entryPoint('java')
    defaultCommand('-jar', cmd)
    exposePort(20081)
}


task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile, syncJar
    inputDir.set(project.file(dockerBuildDir))
    images.add("ua-timetracker/worker:${commitSha()}")
}
