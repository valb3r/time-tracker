/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ua.timetracker.desktoptracker.api.admin;

import ua.timetracker.desktoptracker.api.admin.invoker.ApiCallback;
import ua.timetracker.desktoptracker.api.admin.invoker.ApiClient;
import ua.timetracker.desktoptracker.api.admin.invoker.ApiException;
import ua.timetracker.desktoptracker.api.admin.invoker.ApiResponse;
import ua.timetracker.desktoptracker.api.admin.invoker.Configuration;
import ua.timetracker.desktoptracker.api.admin.invoker.Pair;
import ua.timetracker.desktoptracker.api.admin.invoker.ProgressRequestBody;
import ua.timetracker.desktoptracker.api.admin.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ua.timetracker.desktoptracker.api.admin.model.GroupCreateOrUpdateDto;
import ua.timetracker.desktoptracker.api.admin.model.GroupDto;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupControllerApi {
    private ApiClient localVarApiClient;

    public GroupControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addProject
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{owner_group_ids}/children/projects/{children_ids}"
            .replaceAll("\\{" + "owner_group_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ownerGroupIds)))
            .replaceAll("\\{" + "children_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", childrenIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectValidateBeforeCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ownerGroupIds' is set
        if (ownerGroupIds == null) {
            throw new ApiException("Missing the required parameter 'ownerGroupIds' when calling addProject(Async)");
        }
        
        // verify the required parameter 'childrenIds' is set
        if (childrenIds == null) {
            throw new ApiException("Missing the required parameter 'childrenIds' when calling addProject(Async)");
        }
        

        okhttp3.Call localVarCall = addProjectCall(ownerGroupIds, childrenIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long addProject(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        ApiResponse<Long> localVarResp = addProjectWithHttpInfo(ownerGroupIds, childrenIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> addProjectWithHttpInfo(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        okhttp3.Call localVarCall = addProjectValidateBeforeCall(ownerGroupIds, childrenIds, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectAsync(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectValidateBeforeCall(ownerGroupIds, childrenIds, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUserOrGroup
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserOrGroupCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{owner_group_ids}/children/users-and-groups/{children_ids}"
            .replaceAll("\\{" + "owner_group_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ownerGroupIds)))
            .replaceAll("\\{" + "children_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", childrenIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserOrGroupValidateBeforeCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ownerGroupIds' is set
        if (ownerGroupIds == null) {
            throw new ApiException("Missing the required parameter 'ownerGroupIds' when calling addUserOrGroup(Async)");
        }
        
        // verify the required parameter 'childrenIds' is set
        if (childrenIds == null) {
            throw new ApiException("Missing the required parameter 'childrenIds' when calling addUserOrGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addUserOrGroupCall(ownerGroupIds, childrenIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long addUserOrGroup(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        ApiResponse<Long> localVarResp = addUserOrGroupWithHttpInfo(ownerGroupIds, childrenIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> addUserOrGroupWithHttpInfo(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        okhttp3.Call localVarCall = addUserOrGroupValidateBeforeCall(ownerGroupIds, childrenIds, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserOrGroupAsync(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserOrGroupValidateBeforeCall(ownerGroupIds, childrenIds, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroup
     * @param parentGroupId  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(Long parentGroupId, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupCreateOrUpdateDto;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{parent_group_id}/children"
            .replaceAll("\\{" + "parent_group_id" + "\\}", localVarApiClient.escapeString(parentGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(Long parentGroupId, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'parentGroupId' is set
        if (parentGroupId == null) {
            throw new ApiException("Missing the required parameter 'parentGroupId' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'groupCreateOrUpdateDto' is set
        if (groupCreateOrUpdateDto == null) {
            throw new ApiException("Missing the required parameter 'groupCreateOrUpdateDto' when calling createGroup(Async)");
        }
        

        okhttp3.Call localVarCall = createGroupCall(parentGroupId, groupCreateOrUpdateDto, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param parentGroupId  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @return GroupDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupDto createGroup(Long parentGroupId, GroupCreateOrUpdateDto groupCreateOrUpdateDto) throws ApiException {
        ApiResponse<GroupDto> localVarResp = createGroupWithHttpInfo(parentGroupId, groupCreateOrUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param parentGroupId  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @return ApiResponse&lt;GroupDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupDto> createGroupWithHttpInfo(Long parentGroupId, GroupCreateOrUpdateDto groupCreateOrUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(parentGroupId, groupCreateOrUpdateDto, null);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param parentGroupId  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(Long parentGroupId, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback<GroupDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(parentGroupId, groupCreateOrUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroup(Long id) throws ApiException {
        deleteGroupWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupById
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupById(Async)");
        }
        

        okhttp3.Call localVarCall = groupByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return GroupDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupDto groupById(Long id) throws ApiException {
        ApiResponse<GroupDto> localVarResp = groupByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;GroupDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupDto> groupByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = groupByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupByIdAsync(Long id, final ApiCallback<GroupDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeProject
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{owner_group_ids}/children/projects/{children_ids}"
            .replaceAll("\\{" + "owner_group_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ownerGroupIds)))
            .replaceAll("\\{" + "children_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", childrenIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectValidateBeforeCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ownerGroupIds' is set
        if (ownerGroupIds == null) {
            throw new ApiException("Missing the required parameter 'ownerGroupIds' when calling removeProject(Async)");
        }
        
        // verify the required parameter 'childrenIds' is set
        if (childrenIds == null) {
            throw new ApiException("Missing the required parameter 'childrenIds' when calling removeProject(Async)");
        }
        

        okhttp3.Call localVarCall = removeProjectCall(ownerGroupIds, childrenIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long removeProject(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        ApiResponse<Long> localVarResp = removeProjectWithHttpInfo(ownerGroupIds, childrenIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> removeProjectWithHttpInfo(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        okhttp3.Call localVarCall = removeProjectValidateBeforeCall(ownerGroupIds, childrenIds, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectAsync(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectValidateBeforeCall(ownerGroupIds, childrenIds, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUserOrGroup
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserOrGroupCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{owner_group_ids}/children/users-and-groups/{children_ids}"
            .replaceAll("\\{" + "owner_group_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ownerGroupIds)))
            .replaceAll("\\{" + "children_ids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", childrenIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserOrGroupValidateBeforeCall(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ownerGroupIds' is set
        if (ownerGroupIds == null) {
            throw new ApiException("Missing the required parameter 'ownerGroupIds' when calling removeUserOrGroup(Async)");
        }
        
        // verify the required parameter 'childrenIds' is set
        if (childrenIds == null) {
            throw new ApiException("Missing the required parameter 'childrenIds' when calling removeUserOrGroup(Async)");
        }
        

        okhttp3.Call localVarCall = removeUserOrGroupCall(ownerGroupIds, childrenIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long removeUserOrGroup(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        ApiResponse<Long> localVarResp = removeUserOrGroupWithHttpInfo(ownerGroupIds, childrenIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> removeUserOrGroupWithHttpInfo(Set<Long> ownerGroupIds, Set<Long> childrenIds) throws ApiException {
        okhttp3.Call localVarCall = removeUserOrGroupValidateBeforeCall(ownerGroupIds, childrenIds, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ownerGroupIds  (required)
     * @param childrenIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserOrGroupAsync(Set<Long> ownerGroupIds, Set<Long> childrenIds, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserOrGroupValidateBeforeCall(ownerGroupIds, childrenIds, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param id  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(Long id, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupCreateOrUpdateDto;

        // create path and map variables
        String localVarPath = "/v1/resources/groups/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(Long id, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'groupCreateOrUpdateDto' is set
        if (groupCreateOrUpdateDto == null) {
            throw new ApiException("Missing the required parameter 'groupCreateOrUpdateDto' when calling updateGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupCall(id, groupCreateOrUpdateDto, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @return GroupDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupDto updateGroup(Long id, GroupCreateOrUpdateDto groupCreateOrUpdateDto) throws ApiException {
        ApiResponse<GroupDto> localVarResp = updateGroupWithHttpInfo(id, groupCreateOrUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @return ApiResponse&lt;GroupDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupDto> updateGroupWithHttpInfo(Long id, GroupCreateOrUpdateDto groupCreateOrUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(id, groupCreateOrUpdateDto, null);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param groupCreateOrUpdateDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(Long id, GroupCreateOrUpdateDto groupCreateOrUpdateDto, final ApiCallback<GroupDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(id, groupCreateOrUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<GroupDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
